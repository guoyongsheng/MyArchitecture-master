1、架构采用mvp设计模式 Activity管理Fragmeng,Fragment呈现UI。p层同时持有modle层和view层的引用,同时view层也持
有p层的引用,modle层和view层是分离的。项目的结构按模块划分,一个Activity就相当于是一个模块。

2、Activity和Fragment都应该有一个基类,如BaseActivity和BaseFragment。

3、网络请求框架 volley  okhttp  retrofit 每一个网络请求的框架都应该有取消请求的策略，每一个第三方框架都应该再封
装一层。具体做法:自定义一个类继承框架自己的回调类

4、用gson解析实体和json。 当服务器返回的字段和我们定义的实体字段不一样的时候可以用@SerializedName("")给这个字段
重命名


5、加载图片框架 glide

6、没掌握的知识点有:
  (1)代码混淆
  (2)多平台发布
  (3)数据库
  (4)logger
  (5)LeakCanary
  (6)Dagger2
  (7)https
  (8)Stetho
  (9)CricleImageView
  (10)PhotoView
  (11)单元测试  junit mockito espresso dagger
  (12)svn的使用

7、版本升级策略:和服务器端交互的时候每个接口都应该有一个叫version(版本号)的参数,这样在版本跟新的时候用户没有选择跟新,这时候服务
器端要兼容老版本就可以根据version这个参数来判断是老版本还是新版本从而走不同的分支

8、常见的内存泄漏有:
  (1)单例引起的内存泄漏,生命周期长得对象持有Activity的引用导致内存泄漏
  (2)非静态内部类和匿名内部类引起内存泄漏,非静态内部类和匿名内部类都隐式的持有Activity的引用
  (3)Handle引起的内存泄漏
  (4)资源未关闭引起的内存泄漏如 BroadcastReceiver、File、游标cursor、Bitmap、Stream

9、Android性能优化
  (1)在Activity、Service、Application类中重写onTrimMemory方法,当界面不可见时释放一些资源例如图片的缓存
  (2)用SparseArray<T>代替HashMap<Integer,T>
  (3)枚举通常会比静态常量消耗2倍以上的内存，所以尽量不要使用枚举
  (4)常量用static final来修饰
  (5)使用增强型for循环,ArrayList不要用增强型for循环

10、使用retrofit注意事项
  (1)接口不能继承
  (2)baseUrl要以/结束，如"http://www.doshr.com/dsweb/ai/"

11、rxjava相关
  (1)创建rxjava
  (2)过滤rxjava
  (3)变换rxjava
  (4)组合rxjava

12、material design相关的组件:
  (1)Snackbar
  (2)FloatingActionButton
  (3)Toolbar
  (4)AppBarLayout
  (5)CollapsingToolbarLayout
  (6)CoordinatorLayout
  (7)RecyclerView
  (8)CardView
  (9)TabLayout
  (10)DrawerLayout

13、dagger相关的注解
  (1)@Inject注解:用来提供依赖,可以标注成员变量和这个成员变量的构造方法,最多只能标注一个构造方法
     @Inject注解的局限性:
     (a)不能标注接口
     (b)第三方的类不能被标注
  (2)@Module注解:用来提供依赖,可以标注类,可以为第三方的sdk提供依赖.类名用module为后缀
  (3)@Provides注解:可以标注方法,所有的Provides注解的方法必须放在用Module注解过的类中.方法名用provide为前缀
  (4)@Component注解:可以标注接口和抽象类

14、目前android流行的一套架构: mvp + retrofit2 + rxjava + dagger2 + material design

